#!/usr/bin/env bash

function usage {
  echo "Usage: profilerrific"
  echo "   -n --name name"
  echo "  [-h --help                   ]"
  echo "  [-s --scripts   script   ... ]"
  echo "  [-r --revisions revision ... ]"
  echo "  [-d --diff      prefix       ]"
  echo "  [-g --grapher   script       ]"
}

function tidy {
	echo "$@" | sed -e 's/\s*-.*//'
}

if [[ ! "$*" ]]; then
	usage
	exit
fi

while [[ "$@" ]]; do
	ARG="$1"
	shift
	case "$ARG" in
	-h|--help)      usage; break;;
	-n|--name)      name=`     tidy "$@"`;;
	-r|--revisions) revisions=`tidy "$@"`;;
	-s|--scripts)   scripts=`  tidy "$@"`;;
	-g|--grapher)   grapher=`  tidy "$@"`;;
	-d|--diff)      diff="true"; diff_prefix=`tidy "$@"`;;
	esac
done

if [[ ! "$name" ]]; then
	echo "Missing profile name"
	usage
	exit 1
fi

current_revision=`git rev-parse --short HEAD`

echo "Current revision: $current_revision"

if [[ "$revisions" ]]; then echo "Revisions: $revisions"; fi
if [[ "$scripts" ]];   then echo "Scripts:   $scripts";   fi

# Run the scripts for each revision
for revision in $revisions; do
	git reset --hard $revision --
	for script in $scripts; do
		$script "$name" "$revision"
	done
done

# Run the scripts even if no revisions are supplied
if [[ ! "$revisions" ]]; then
	for script in $scripts; do
		$script "$name" "$current_revision"
	done
fi

# Bring the WC back to where we left off
git reset --hard $current_revision --

for revisionl in $revisions; do
	for revisionr in $revisions; do
		if [[ $revisionl < $revisionr ]]; then

			# Output a diff of each pair
			if [[ "$diff" ]]; then
				echo "Dumping source diff for revisions-range $revisionl..$revisionr"
				git diff --no-color "$revisionl..$revisionr" > ${diff_prefix}diff-$revisionl..$revisionr.diff
			fi

			# Graph each revision pair
			if [[ "$grapher" ]]; then
				for script in $scripts; do
					echo "Graphing script $script results for revisions $revisionl vs. $revisionr"
					$grapher "$name" "$script" "$revisionl" "$revisionr"
				done
			fi
		fi
	done
done
